// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`control.text $ariaDetails 1`] = `
<wup-text>
  <label
    for="txt1"
  >
    <span>
      <input
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
      <span
        class="wup-hidden"
      >
        Some details for screen-readers
      </span>
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
</wup-text>
`;

exports[`control.text $ariaDetails 2`] = `
<wup-text>
  <label
    for="txt1"
  >
    <span>
      <input
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
</wup-text>
`;

exports[`control.text $ariaSpeak 1`] = `
<wup-text>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="my-test-id txt2 my-test-id2"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
  <section
    aria-atomic="true"
    aria-live="off"
    class="wup-hidden"
    id="txt2"
  >
    Hello
  </section>
</wup-text>
`;

exports[`control.text $ariaSpeak 2`] = `
<wup-text>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="my-test-id my-test-id2"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
</wup-text>
`;

exports[`control.text $show/$hide error 1`] = `
<wup-text>
  <label
    for="txt1"
  >
    <span>
      <input
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
</wup-text>
`;

exports[`control.text $show/$hide error 2`] = `
<wup-text
  invalid=""
>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="txt2"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
  <wup-popup
    aria-atomic="true"
    aria-live="off"
    error=""
    id="txt2"
    role="alert"
    style="opacity: 0;"
  >
    <span
      class="wup-hidden"
    />
    <span>
      Some custom message here
    </span>
  </wup-popup>
</wup-text>
`;

exports[`control.text $show/$hide error 3`] = `
<wup-text>
  <label
    for="txt1"
  >
    <span>
      <input
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
</wup-text>
`;

exports[`control.text common tests render + styles 1`] = `<wup-text />`;

exports[`control.text common tests render + styles 2`] = `
<style>
  .wup-hidden, [wup-hidden] {
position: absolute;
height:1px; width:1px;
overflow:hidden;
clip:rect(1px,1px,1px,1px);
min-width:initial;
padding:0;}
  :root {
          --base-focus: #00778d;
          --base-btn-bg: #009fbc;
          --base-btn-text: #fff;
          --base-btn-focus: #005766;
          --base-btn2-bg: var(--base-btn-text);
          --base-btn2-text: var(--base-btn-bg);
          --base-btn3-bg: none;
          --base-btn3-text: inherit;
          --base-sep: #e4e4e4;
          --border-radius: 6px;
          --anim-time: 200ms;
          --anim: var(--anim-time) cubic-bezier(0, 0, 0.2, 1) 0ms;
          --icon-hover-r: 30px;
          --icon-hover: #0001;
        }
        [wupdark] {
          --base-btn-focus: #bdbdbd;
          --base-sep: #141414;
          --icon-hover: #fff3;
          --scroll: #fff2;
          --scroll-hover: #fff3;
        }
  :root {
        --ctrl-padding: 1.5em 1em 0.5em 1em;
        --ctrl-focus: var(--base-focus);
        --ctrl-focus-label: var(--ctrl-focus);
        --ctrl-selected: var(--ctrl-focus);
        --ctrl-label: #5e5e5e;
        --ctrl-icon: var(--ctrl-label);
        --ctrl-icon-size: 1em;
        --ctrl: inherit;
        --ctrl-bg: #fff;
        --ctrl-border: #e6e6e6;
        --ctrl-border-radius: var(--border-radius);
        --ctrl-err: #ad0000;
        --ctrl-err-bg: #fff4fa;
        --ctrl-err-valid: green;
        --ctrl-invalid-border: red;
        --wup-icon-cross: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='768' height='768'%3E%3Cpath d='M674.515 93.949a45.925 45.925 0 0 0-65.022 0L384.001 318.981 158.509 93.487a45.928 45.928 0 0 0-65.022 0c-17.984 17.984-17.984 47.034 0 65.018l225.492 225.494L93.487 609.491c-17.984 17.984-17.984 47.034 0 65.018s47.034 17.984 65.018 0l225.492-225.492 225.492 225.492c17.984 17.984 47.034 17.984 65.018 0s17.984-47.034 0-65.018L449.015 383.999l225.492-225.494c17.521-17.521 17.521-47.034 0-64.559z'/%3E%3C/svg%3E");
        --wup-icon-check: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='768' height='768'%3E%3Cpath d='M37.691 450.599 224.76 635.864c21.528 21.32 56.11 21.425 77.478 0l428.035-426.23c21.47-21.38 21.425-56.11 0-77.478s-56.11-21.425-77.478 0L263.5 519.647 115.168 373.12c-21.555-21.293-56.108-21.425-77.478 0s-21.425 56.108 0 77.478z'/%3E%3C/svg%3E");
        --wup-icon-dot: url("data:image/svg+xml,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='50' cy='50' r='20'/%3E%3C/svg%3E");
        --wup-icon-back: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='768' height='768'%3E%3Cpath d='m509.8 16.068-329.14 329.14c-21.449 21.449-21.449 56.174 0 77.567l329.14 329.14c21.449 21.449 56.174 21.449 77.567 0s21.449-56.174 0-77.567l-290.36-290.36 290.36-290.36c21.449-21.449 21.449-56.173 0-77.567-21.449-21.394-56.173-21.449-77.567 0z'/%3E%3C/svg%3E");
      }
      [wupdark] {
        --ctrl-bg: none;
        --ctrl-border: #104652;
        --ctrl-label: #919191;
        --ctrl-icon: var(--ctrl-label);
        --ctrl-focus-label: #25a1b6;
        --ctrl-selected: #25a1b6;
        --ctrl-err: #ff6666;
        --ctrl-err-bg: #000;
        --ctrl-err-valid: #54d754;
      }
  :root {
      --ctrl-autofill: #00869e;
      --ctrl-clear: red;
      --ctrl-clear-hover: rgba(255,0,0,0.1);
     }
     [wupdark] {
        --ctrl-clear-hover: rgba(255,0,0,0.2);
        --ctrl-autofill: #89bc55;
        --ctrl-autofill-caret: #fff;
      }
  
      WUP-TEXT {
        --ctrl-focus-border: var(--ctrl-focus);
        contain: style;
        display: block;
        margin: 20px 0;
        box-shadow: 0 0 0 1px var(--ctrl-border);
        border-radius: var(--ctrl-border-radius);
        color: var(--ctrl);
        background: var(--ctrl-bg);
        cursor: pointer;
        -webkit-tap-highlight-color: transparent;
      }
      WUP-TEXT strong,
      WUP-TEXT legend {
        color: var(--ctrl-label);
        pointer-events: none;
      }
      WUP-TEXT[invalid],
      WUP-TEXT[invalid] &gt; [menu] {
        --ctrl-focus-border: var( --ctrl-invalid-border);
        box-shadow: 0 0 3px 0 var(--ctrl-focus-border);
      }
      WUP-TEXT:focus-within,
      WUP-TEXT:focus-within &gt; [menu] {
        z-index: 90010;
        box-shadow: 0 0 2px 1px var(--ctrl-focus-border);
      }
      WUP-TEXT:focus-within strong,
      WUP-TEXT:focus-within legend {
        color: var(--ctrl-focus-label);
        pointer-events: initial;
      }
      [disabled] WUP-TEXT,
      WUP-TEXT[disabled] {
        opacity: 0.6;
        cursor: not-allowed;
        -webkit-user-select: none;
        user-select: none;
      }
      [disabled] WUP-TEXT &gt; label,
      WUP-TEXT[disabled] &gt; label {
        pointer-events: none;
      }
      WUP-TEXT label {
        display: flex;
        align-items: center;
        box-sizing: border-box;
        font: inherit;
        cursor: inherit;
        padding: var(--ctrl-padding);
        padding-top: 0;
        padding-bottom: 0;
      }
      WUP-TEXT input,
      WUP-TEXT textarea {
        padding: 0;
        margin: 0;
        cursor: inherit;
      }
      WUP-TEXT [contenteditable=true] {
        margin: var(--ctrl-padding);
        margin-left: 0;
        margin-right: 0;
        cursor: inherit;
      }
      WUP-TEXT strong {
        cursor: inherit;
      }
      WUP-TEXT strong:empty {
        display: none;
      }
      WUP-TEXT [aria-required="true"] + strong:after,
      WUP-TEXT fieldset[aria-required="true"] &gt; legend:after {
        content: "*";
        font-size: larger;
        font-weight: bolder;
        line-height: 0;
      }
      WUP-TEXT [error] {
        cursor: pointer;
        font-size: small;
        color: var(--ctrl-err);
        background: var(--ctrl-err-bg);
        overflow: auto;
        overflow: overlay;
        // text-shadow: 0 0 0 var(--ctrl-err);
      }
      WUP-TEXT [error] ul {
        margin:0; padding:2px 4px 2px;
      }
      WUP-TEXT [error] li {
        display: flex;
        align-items: center;
        margin-left: -5px;
      }
      WUP-TEXT [error] li:before {
        content: '';
        --ctrl-icon-img: var(--wup-icon-dot);
        --ctrl-icon: var(--ctrl-err);
        
display: inline-block;
width: var(--ctrl-icon-size);
min-height: var(--ctrl-icon-size);
box-sizing: content-box;
margin: 0;
padding: 5px;
flex: 0 0 auto;
align-self: stretch;
border: none;
box-shadow: none;
background: var(--ctrl-icon);
-webkit-mask-size: var(--ctrl-icon-size);
mask-size: var(--ctrl-icon-size);
-webkit-mask-repeat: no-repeat;
mask-repeat: no-repeat;
-webkit-mask-position: center;
mask-position: center;
-webkit-mask-image: var(--ctrl-icon-img);
mask-image: var(--ctrl-icon-img);
      }
      WUP-TEXT [error] li[valid] {
        color: var(--ctrl-err-valid);
      }
      WUP-TEXT [error] li[valid]:before {
        content: '';
        --ctrl-icon-img: var(--wup-icon-check);
        --ctrl-icon: var(--ctrl-err-valid);
      }
      WUP-TEXT:focus-within [error] {
        max-height: none;
      }
      @media (hover: hover) and (pointer: fine) {
        WUP-TEXT:hover strong,
        WUP-TEXT[hovered] strong{
          color: var(--ctrl-focus-label);
        }
        WUP-TEXT:hover,
        WUP-TEXT:hover&gt;[menu],
        WUP-TEXT[hovered],
        WUP-TEXT[hovered]&gt;[menu] {
          box-shadow: 0 0 2px 1px var(--ctrl-focus-border);
        }
      }
        WUP-TEXT {
          contain: style;
          cursor: text;
        }
        WUP-TEXT label &gt; span {
          width: 100%;
          position: relative;
          display: flex;
          flex-direction: row-reverse;
        }
        WUP-TEXT input,
        WUP-TEXT textarea,
        WUP-TEXT [maskholder],
        WUP-TEXT [prefix],
        WUP-TEXT [postfix] {
          padding: var(--ctrl-padding);
          padding-left: 0;
          padding-right: 0;
          font: inherit;
          color: inherit;
          margin: 0;
          text-overflow: ellipsis;
          overflow: hidden;
          white-space: nowrap;
        }
        WUP-TEXT input,
        WUP-TEXT textarea,
        WUP-TEXT [contenteditable=true],
        WUP-TEXT [maskholder],
        WUP-TEXT [postfix] {
          width: 100%;
          box-sizing: border-box;
          border: none;
          background: none;
          outline: none;
        }
        WUP-TEXT [prefix],
        WUP-TEXT [postfix] {
          color: inherit;
          flex-shrink: 0;
        }
        WUP-TEXT [maskholder],
        WUP-TEXT [prefix],
        WUP-TEXT [postfix] {
          display: none;
          pointer-events: none;
          text-overflow: initial;
          white-space: pre;
        }
        WUP-TEXT [postfix] {
          position: absolute;
        }
        WUP-TEXT [maskholder] {
          position: absolute;
          opacity: 0.65;
        }
        WUP-TEXT [maskholder]&gt;i,
        WUP-TEXT [postfix]&gt;i {
          visibility: hidden;
          font: inherit;
          white-space: pre;
        }
        WUP-TEXT input:-webkit-autofill,
        WUP-TEXT textarea:-webkit-autofill,
        WUP-TEXT [contenteditable=true]:-webkit-autofill {
          font: inherit;
          -webkit-background-clip: text;
          -webkit-text-fill-color: var(--ctrl-autofill);
          caret-color: var(--ctrl-autofill-caret, auto);
        }
        WUP-TEXT input:autofill,
        WUP-TEXT textarea:autofill,
        WUP-TEXT [contenteditable=true]:autofill {
          font: inherit;
          background-clip: text;
          text-fill-color: var(--ctrl-autofill);
          caret-color: var(--ctrl-autofill-caret, auto);
        }
        WUP-TEXT strong {
          display: block;
          position: absolute;
          top: 50%;
          left: 0;
          padding: 0;
          margin: 0;
          box-sizing: border-box;
          max-width: 100%;
          text-overflow: ellipsis;
          overflow: hidden;
          white-space: nowrap;
          transform-origin: top left;
          transform: translateY(-50%);
          font-weight: normal;
          text-decoration: none;
        }
        @media not all and (prefers-reduced-motion) {
          WUP-TEXT strong {
            transition: top var(--anim), transform var(--anim), color var(--anim);
          }
        }
        WUP-TEXT input:not(:focus):placeholder,
        WUP-TEXT textarea:not(:focus):placeholder {
          color: transparent;
        }
        WUP-TEXT:focus-within strong,
        WUP-TEXT input:not(:placeholder-shown) + strong,
        WUP-TEXT textarea:not(:placeholder-shown) + strong,
        WUP-TEXT [contenteditable=true]:not(:empty) + strong,
        WUP-TEXT legend {
          top: 0.2em;
          transform: scale(0.9);
        }
        WUP-TEXT input:-webkit-autofill + strong
        WUP-TEXT textarea:-webkit-autofill + strong
        WUP-TEXT [contenteditable=true]:-webkit-autofill + strong {
           top: 0.2em;
           transform: scale(0.9);
        }
        WUP-TEXT input:autofill + strong,
        WUP-TEXT textarea:autofill + strong,
        WUP-TEXT [contenteditable=true]:autofill + strong {
           top: 0.2em;
           transform: scale(0.9);
        }
        WUP-TEXT:focus-within [maskholder],
        WUP-TEXT:focus-within [prefix],
        WUP-TEXT:focus-within [postfix],
        WUP-TEXT input:not(:placeholder-shown) ~ [prefix],
        WUP-TEXT input:not(:placeholder-shown) ~ [postfix],
        WUP-TEXT textarea:not(:placeholder-shown) ~ [prefix],
        WUP-TEXT textarea:not(:placeholder-shown) ~ [postfix] {
          display: inline-block;
        }
        /* style for icons */
        WUP-TEXT label&gt;button,
        WUP-TEXT label&gt;button:after,
        WUP-TEXT label:after,
        WUP-TEXT label:before {
          
display: inline-block;
width: var(--ctrl-icon-size);
min-height: var(--ctrl-icon-size);
box-sizing: content-box;
margin: 0;
padding: 5px;
flex: 0 0 auto;
align-self: stretch;
border: none;
box-shadow: none;
background: var(--ctrl-icon);
-webkit-mask-size: var(--ctrl-icon-size);
mask-size: var(--ctrl-icon-size);
-webkit-mask-repeat: no-repeat;
mask-repeat: no-repeat;
-webkit-mask-position: center;
mask-position: center;
-webkit-mask-image: var(--ctrl-icon-img);
mask-image: var(--ctrl-icon-img);
          -webkit-mask-image: none;
          mask-image: none;
        }
        WUP-TEXT label:after {
          cursor: pointer;
          margin-right: calc(var(--ctrl-icon-size) / -2);
        }
        WUP-TEXT label:before {
          cursor: pointer;
          margin-left: calc(var(--ctrl-icon-size) / -2);
        }
        WUP-TEXT label&gt;button {
          contain: strict;
          z-index: 1;
          font-size: inherit;
        }
        WUP-TEXT button[clear] {
          display: none;
          position: relative;
          margin-right: -0.5em;
          align-self: center;
          cursor: pointer;
          --ctrl-icon-img: var(--wup-icon-cross);
          background: none;
          -webkit-mask: none;
          mask: none;
        }
        WUP-TEXT:focus-within button[clear] {
          display: inline-block;
          opacity: 1;
        }
        WUP-TEXT button[clear=back] {
          --ctrl-icon-img: var(--wup-icon-back);
        }
        WUP-TEXT button[clear]:after {
          content: "";
          padding: 0;
          -webkit-mask-image: var(--ctrl-icon-img);
          mask-image: var(--ctrl-icon-img);
        }
        WUP-TEXT button[clear]:after,
        WUP-TEXT button[clear]:before {
          position: absolute;
          top: 50%; left: 50%;
          transform: translate(-50%, -50%);
          width: 100%;
          height: 100%;
          border-radius: 50%;
        }
        @media (hover: hover) and (pointer: fine) {
          WUP-TEXT:hover button[clear] {
            display: inline-block;
            opacity: 1;
          }
          WUP-TEXT button[clear]:hover:before {
            content: "";
            box-shadow: inset 0 0 0 99999px var(--ctrl-clear-hover);
          }
          WUP-TEXT button[clear]:hover:after {
            background: var(--ctrl-clear);
          }
        }
        WUP-TEXT[disabled] button[clear],
        WUP-TEXT[readonly] button[clear] {
          display: none;
          pointer-events: none;
        }
</style>
`;

exports[`control.text common tests snapshot of $defaults 1`] = `
{
  "autoComplete": null,
  "autoFocus": false,
  "clearActions": 2,
  "clearButton": true,
  "debounceMs": 0,
  "disabled": false,
  "focusDebounceMs": 100,
  "label": null,
  "mask": "",
  "maskholder": "",
  "name": null,
  "postfix": "",
  "prefix": "",
  "readOnly": false,
  "selectOnFocus": false,
  "storage": "local",
  "storageKey": "",
  "validateDebounceMs": 500,
  "validationCase": 13,
  "validationRules": {
    "$alwaysInvalid": [Function],
    "$alwaysValid": [Function],
    "email": [Function],
    "max": [Function],
    "min": [Function],
    "required": [Function],
  },
  "validationShowAll": false,
  "validations": null,
}
`;

exports[`control.text common tests snapshot of $defaults 2`] = `undefined`;

exports[`control.text common tests snapshot of $defaults 3`] = `
[
  "disabled",
  "readonly",
  "w-autocomplete",
  "w-autofocus",
  "w-clearactions",
  "w-clearbutton",
  "w-debouncems",
  "w-disabled",
  "w-focusdebouncems",
  "w-initvalue",
  "w-label",
  "w-mask",
  "w-maskholder",
  "w-name",
  "w-postfix",
  "w-prefix",
  "w-readonly",
  "w-selectonfocus",
  "w-storage",
  "w-storagekey",
  "w-validatedebouncems",
  "w-validationcase",
  "w-validationrules",
  "w-validations",
  "w-validationshowall",
]
`;

exports[`control.text options clearButton 1`] = `
<wup-text>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="txt2"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
  <section
    aria-atomic="true"
    aria-live="off"
    class="wup-hidden"
    id="txt2"
  />
</wup-text>
`;

exports[`control.text options clearButton 2`] = `
<wup-text>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="txt2"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
  </label>
  <section
    aria-atomic="true"
    aria-live="off"
    class="wup-hidden"
    id="txt2"
  />
</wup-text>
`;

exports[`control.text validations $options.validationShowAll 1`] = `
<wup-text
  invalid=""
  required=""
>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="txt2"
        aria-required="true"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
  <wup-popup
    aria-atomic="true"
    aria-live="off"
    error=""
    id="txt2"
    role="alert"
    style="display: none;"
  >
    <span
      class="wup-hidden"
    />
    <span>
      This field is required
    </span>
    <ul
      aria-hidden="true"
    >
      <li>
        Min length is 2 characters
      </li>
      <li>
        Max length is 3 characters
      </li>
      <li>
        Invalid email address
      </li>
    </ul>
  </wup-popup>
</wup-text>
`;

exports[`control.text validations $options.validationShowAll 2`] = `
<wup-text
  invalid=""
  required=""
>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="txt2"
        aria-required="true"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
  <wup-popup
    aria-atomic="true"
    aria-live="off"
    error=""
    id="txt2"
    role="alert"
    style="display: none;"
  >
    <span
      class="wup-hidden"
    />
    <span
      class="wup-hidden"
    >
      Invalid email address
    </span>
    <ul
      aria-hidden="true"
    >
      <li
        valid=""
      >
        Min length is 2 characters
      </li>
      <li
        valid=""
      >
        Max length is 3 characters
      </li>
      <li>
        Invalid email address
      </li>
    </ul>
  </wup-popup>
</wup-text>
`;

exports[`control.text validations $options.validationShowAll 3`] = `
<wup-text
  invalid=""
  required=""
>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="txt5"
        aria-required="true"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong>
        First Name
      </strong>
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
  <wup-popup
    aria-atomic="true"
    aria-live="off"
    error=""
    id="txt5"
    role="alert"
    style="display: none;"
  >
    <span
      class="wup-hidden"
    >
      Error for First Name:
    </span>
    <span>
      This field is required
    </span>
  </wup-popup>
</wup-text>
`;

exports[`control.text validations options.validationCase 1`] = `
<wup-text>
  <label
    for="txt1"
  >
    <span>
      <input
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong />
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
</wup-text>
`;

exports[`control.text validations options.validationCase 2`] = `
<wup-text
  invalid=""
  required=""
>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="txt3"
        aria-required="true"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong>
        First Input
      </strong>
    </span>
    <button
      aria-hidden="true"
      clear="back"
      tabindex="-1"
      type="button"
    />
  </label>
  <wup-popup
    aria-atomic="true"
    aria-live="off"
    error=""
    id="txt3"
    role="alert"
    style="display: none;"
  >
    <span
      class="wup-hidden"
    >
      Error for First Input:
    </span>
    <span>
      This field is required
    </span>
  </wup-popup>
</wup-text>
`;

exports[`control.text validations options.validationCase 3`] = `
<wup-text
  invalid=""
  required=""
>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="txt4"
        aria-required="true"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong>
        First Input
      </strong>
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
  <wup-popup
    aria-atomic="true"
    aria-live="off"
    error=""
    id="txt4"
    style="display: none;"
  >
    <span
      class="wup-hidden"
    >
      Error for First Input:
    </span>
    <span>
      custom err here
    </span>
  </wup-popup>
</wup-text>
`;

exports[`control.text validations options.validationCase 4`] = `
<wup-text
  invalid=""
  required=""
>
  <label
    for="txt1"
  >
    <span>
      <input
        aria-describedby="txt5"
        aria-required="true"
        autocomplete="off"
        id="txt1"
        placeholder=" "
        type="text"
      />
      <strong>
        First Input
      </strong>
    </span>
    <button
      aria-hidden="true"
      clear=""
      tabindex="-1"
      type="button"
    />
  </label>
  <wup-popup
    aria-atomic="true"
    aria-live="off"
    error=""
    id="txt5"
    role="alert"
    style="display: none;"
  >
    <span
      class="wup-hidden"
    >
      Error for First Input:
    </span>
    <span>
      This field is required
    </span>
  </wup-popup>
</wup-text>
`;

exports[`control.text with form 1`] = `
<wup-form
  role="form"
>
  <wup-text>
    <label
      for="txt1"
    >
      <span>
        <input
          autocomplete="off"
          id="txt1"
          placeholder=" "
          type="text"
        />
        <strong>
          First Input
        </strong>
      </span>
      <button
        aria-hidden="true"
        clear=""
        tabindex="-1"
        type="button"
      />
    </label>
  </wup-text>
</wup-form>
`;
