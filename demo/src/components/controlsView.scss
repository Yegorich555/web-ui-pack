/* stylelint-disable no-descending-specificity */
.common {
  //WARN: it's tricky rule
  contain: style; // otherwise it doesn't work for popup inside
  display: block;
  margin-bottom: 20px;
  position: relative;
  border-radius: var(--ctrl-border-radius);
  background: var(--ctrl-back);
  cursor: pointer;
}

.common strong,
.common legend {
  color: var(--ctrl-label);
}

.common:focus-within,
.common:focus-within > [menu] {
  outline: 1px solid var(--ctrl-focus);
}

.common:focus-within strong,
.common:focus-within legend,
.common input:focus + * {
  color: var(--ctrl-focus-label);
}

.common[disabled] {
  opacity: 0.8;
  cursor: not-allowed;
  -webkit-user-select: none;
  user-select: none;
}

.common[disabled] > * {
  pointer-events: none;
}

.common[invalid],
.common[invalid] > [menu] {
  box-shadow: 0 0 3px 0 var(--ctrl-invalid-border);
  outline-color: var(--ctrl-invalid-border);
}

@media (hover: hover) {
  .common:hover,
  .common:hover > [menu] {
    box-shadow: 0 0 3px 1px var(--ctrl-focus);
  }

  .common[invalid]:hover,
  .common[invalid]:hover > [menu] {
    box-shadow: 0 0 3px 1px var(--ctrl-invalid-border);
  }
}

.common label {
  display: flex;
  align-items: center;
  box-sizing: border-box;
  font: inherit;
  cursor: inherit;
  padding: var(--ctrl-padding);
  padding-top: 0;
  padding-bottom: 0;
}

.common label::before,
.common label::after {
  box-sizing: content-box;
  cursor: pointer;
  flex: 0 0 auto;
  padding: var(--ctrl-padding);
  padding-left: 0;
  padding-right: 0;
  align-self: stretch;
}

.common label::before {
  margin-right: 0.5em;
}

.common label::after {
  margin-left: 0.5em;
}

.common input {
  padding: 0;
  margin: 0;
  cursor: inherit;
}

.common input + * {
  cursor: inherit;
}

.common input:required + *::after,
.common fieldset[aria-required] > legend::after {
  content: "*";
  font-size: larger;
  font-weight: bolder;
  line-height: 0;
}

.common [error] {
  cursor: pointer;
  font-size: small;
  color: var(--ctrl-err-text);
  background: var(--ctrl-err-back);
  margin: -4px 0;
}
// end here
.textControl {
  cursor: text;

  label > span {
    width: 100%;
    position: relative;
  }

  input {
    width: 100%;
    box-sizing: border-box;
    font: inherit;
    margin: 0;
    padding: var(--ctrl-padding);
    padding-left: 0;
    padding-right: 0;

    border: none;
    background: none;
    outline: none;

    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
  }

  input + * {
    display: block;
    position: absolute;
    top: 50%;
    left: 0;

    padding: 0;
    margin: 0;
    box-sizing: border-box;

    max-width: 100%;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;

    @media not all and (prefers-reduced-motion) {
      transition: top var(--anim), transform var(--anim), color var(--anim);
    }
    transform-origin: top left;
    transform: translateY(-50%);

    font-weight: normal;
    text-decoration: none;
  }

  input:focus + *,
  input:not(:placeholder-shown) + *,
  legend {
    top: 0.2em;
    transform: scale(0.9);
  }
}

.radioGroup {
  --ctrl-radio-size: 14px;
  --ctrl-radio-spot-size: 8px;
  --ctrl-radio-back: #fff;
  --ctrl-radio-off: #fff;
  --ctrl-radio-on: var(--ctrl-focus);
  --ctrl-radio-border: #0002;
  --ctrl-radio-border-size: 2px;
  --ctrl-radio-gap: 0.7em;

  padding: var(--ctrl-padding);

  fieldset {
    border: none;
    padding: 0;
    margin: calc(var(--ctrl-radio-gap) / -1);

    display: flex;
    flex-wrap: wrap;
  }

  legend,
  strong {
    display: block;
    position: absolute;
    transform-origin: top left;
    top: 0.2em;
    transform: scale(0.9);

    margin: 0 var(--ctrl-radio-gap);
    padding: 0;
    box-sizing: border-box;

    max-width: 100%;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;

    font-weight: normal;
    text-decoration: none;
  }

  label {
    padding: 0;
  }

  input {
    position: absolute;
    height: 1px;
    width: 1px;
    overflow: hidden;
    clip: rect(1px, 1px, 1px, 1px); /* from https://snook.ca/archives/html_and_css/hiding-content-for-accessibility */
    outline: none;
  }

  input + * {
    padding: var(--ctrl-radio-gap);
    cursor: pointer;
    display: inline-flex;
    align-items: center;

    &::after {
      content: "";
      // it's not relative because 1.2em of 14px provides round-pixel-issue and not always rounded items
      width: var(--ctrl-radio-size);
      height: var(--ctrl-radio-size);
      border: calc((var(--ctrl-radio-size) - var(--ctrl-radio-spot-size)) / 2) solid var(--ctrl-radio-back);
      box-sizing: border-box;
      background: var(--ctrl-radio-off);
      box-shadow: 0 0 1px var(--ctrl-radio-border-size) var(--ctrl-radio-border);
      border-radius: 50%;
      margin-left: 0.5em;

      @media not all and (prefers-reduced-motion) {
        transition: background-color var(--anim);
      }
    }
  }

  input:checked + *::after {
    background-color: var(--ctrl-radio-on);
  }

  input:focus + * {
    color: var(--ctrl-selected);

    &::after {
      box-shadow: 0 0 1px var(--ctrl-radio-border-size) var(--ctrl-selected);
    }
  }
  @media (hover: hover) {
    input + *:hover {
      color: var(--ctrl-selected);

      &::after {
        box-shadow: 0 0 1px var(--ctrl-radio-border-size) var(--ctrl-selected);
      }
    }
  }
}

.combobox {
  cursor: pointer;
}

.combobox input:not(:placeholder-shown) {
  cursor: text;
}

.combobox label::after {
  content: "";
  width: var(--ctrl-combo-icon-size);
  min-height: var(--ctrl-combo-icon-size);

  background-color: var(--ctrl-combo-icon);
  -webkit-mask-image: var(--ctrl-combo-icon-img);
  mask-image: var(--ctrl-combo-icon-img);
  -webkit-mask-size: var(--ctrl-combo-icon-size);
  mask-size: var(--ctrl-combo-icon-size);
  -webkit-mask-repeat: no-repeat;
  mask-repeat: no-repeat;
  -webkit-mask-position: center;
  mask-position: center;
}

@media not all and (prefers-reduced-motion) {
  .combobox label::after {
    transition: transform var(--anim);
  }
}

@media (hover: hover) {
  .combobox:hover {
    label::after {
      background-color: var(--ctrl-focus);
    }
  }
}

.combobox[opened] label::after {
  transform: rotate(180deg);
}

.combobox ul {
  margin: 0;
  padding: 0;
  list-style-type: none;
  cursor: pointer;
}

.combobox li {
  padding: 1em;
}

.combobox li:hover,
.combobox li[aria-selected="true"] {
  color: var(--ctrl-combo-selected);
  background: var(--ctrl-combo-selected-back);
}

.combobox li[focused] {
  box-shadow: inset 0 0 4px 0 var(--ctrl-focus);
  border-radius: var(--ctrl-border-radius);
}

.combobox [menu] {
  padding: 0;
  overflow: hidden;
}

.combobox [menu] > ul {
  max-height: 300px;
  overflow: auto;
}

.multiselect {
  --ctrl-multi-item-back: #f5f5f5;
  --ctrl-multi-remove: var(--cltr-icon);
  --ctrl-multi-remove-img: var(--wup-icon-cross);
  --ctrl-multi-remove-size: 1em;
  --ctrl-multi-selected: #00768b;
  --ctrl-multi-selected-back: #eff9fa;
  --ctrl-multi-selected-remove: #00768b;
  --ctrl-multi-gap: 0.5em;

  label > span {
    display: flex;
    flex-wrap: wrap;
    padding: var(--ctrl-padding);
    padding-left: 0;
    padding-right: 0;
    margin: calc(var(--ctrl-multi-gap) / -2);

    > span,
    input {
      margin: calc(var(--ctrl-multi-gap) / 2);
      padding: var(--ctrl-multi-gap);
    }

    > span {
      display: flex;
      align-items: center;
      background-color: var(--ctrl-multi-item-back);
      border-radius: var(--ctrl-border-radius);
      cursor: pointer;

      &::after {
        content: "";
        display: inline-block;
        width: var(--ctrl-multi-remove-size);
        height: var(--ctrl-multi-remove-size);
        transform: scale(0.9);
        margin-left: 0.5em;
        background-color: var(--ctrl-multi-remove);

        /* stylelint-disable plugin/no-unsupported-browser-features */
        -webkit-mask-image: var(--wup-icon-cross);
        mask-image: var(--wup-icon-cross);
        -webkit-mask-size: contain;
        mask-size: contain;
        -webkit-mask-repeat: no-repeat;
        mask-repeat: no-repeat;
        -webkit-mask-position: center;
        mask-position: center;
        /* stylelint-enable plugin/no-unsupported-browser-features */
      }
    }

    @media (hover: hover) {
      > span:hover {
        color: var(--ctrl-selected);
        background-color: var(--ctrl-multi-selected-back);

        &::after {
          background-color: var(--ctrl-multi-selected-remove);
        }
      }
    }

    input {
      width: 0; // disable OS-defined-width
      min-width: 2em;
      background: #f7d4f7;
      padding-left: 0;
      padding-right: 0;
    }
  }

  strong {
    margin: calc(var(--ctrl-multi-gap) / 2);
  }

  input:focus + *,
  input:not(:placeholder-shown) + * {
    top: 0.2em;
  }
}
